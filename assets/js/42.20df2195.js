(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{619:function(e,t,n){e.exports=n.p+"assets/img/vep6-no-merge.f0b14af1.png"},620:function(e,t,n){e.exports=n.p+"assets/img/vep6-merge.a95ff22f.png"},791:function(e,t,n){"use strict";n.r(t);var s=n(1),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"vep-7-merge-in-contract-request-calls-into-original-response-as-one-transaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vep-7-merge-in-contract-request-calls-into-original-response-as-one-transaction"}},[e._v("#")]),e._v(" VEP-7: Merge In-Contract Request Calls into Original Response as one Transaction")]),e._v(" "),s("h2",{attrs:{id:"background"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[e._v("#")]),e._v(" Background")]),e._v(" "),s("p",[e._v("In Section 2.2(Definition of Ledger) of Vite White Paper, it explicitly defines:")]),e._v(" "),s("blockquote",[s("p",[e._v("Transactions are divided into request and response transactions, each of which corresponds to a separate block, each account Ai corresponds to a chain, a transaction pair, and a response transaction referencing the hash of its corresponding request transaction.")])]),e._v(" "),s("p",[e._v("In Vite, a request call to a smart contract may influence the status of multiple contracts or accounts. At this time, several new request transactions will be created and sent out after the response transaction is complete.")]),e._v(" "),s("p",[e._v("Let's see an example. User A sends a request transaction A1 to contract B, which executes business logic in a response transaction B1 and creates two new request transactions B2 and B3.\nHere B2 is a transfer transaction to user C while B3 calls contract D. Correspondingly, account C and contract D create related response transactions C1 and D1. In this example, 3 request blocks A1, B2, B3 and 3 response blocks B1, C1, D1 are created all together.")]),e._v(" "),s("p",[s("img",{attrs:{src:n(619),alt:"figure"}})]),s("div",{attrs:{align:"center"}},[e._v("Figure 1")]),s("p"),e._v(" "),s("h2",{attrs:{id:"pros-and-cons-of-current-design"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pros-and-cons-of-current-design"}},[e._v("#")]),e._v(" Pros and Cons of Current Design")]),e._v(" "),s("p",[e._v("As shown in Figure 1, from the perspective of business logic, response transaction B1 and request transactions B2 and B3 can be deemed as one operation. But they are split into 3 blocks in practice.")]),e._v(" "),s("p",[e._v("Pros:")]),e._v(" "),s("ul",[s("li",[e._v("Request transaction and response transaction are paired up, resulting in neater ledger structure. It is also convenient to query un-received transactions or transaction status (responded or not).")])]),e._v(" "),s("p",[e._v("Cons:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("It is difficult to implement ACID semantic for in-contract request calls. In order to verify the response transaction of a contract, all relevant request transactions initiated by the response transaction should be verified at the same time because in-contract request transactions inherit the original response transaction's context and cannot be verified separately.\nMeanwhile, since all the transactions must be propagated independently in the network, if a specific node is down after sending out the response before broadcasting the newly-initiated request transactions, the contract chain will become incomplete due to missing blocks.")])]),e._v(" "),s("li",[s("p",[e._v("Data redundancy has been caused on chain due to duplicated information stored both in response and requests. This includes block producer, block height, previous block hash and etc.")])])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",[e._v("Currently in TestNet, ACID on contract response-requests is guaranteed by removing signatures on in-contract request transactions, discarding in-contract request transactions received from the network but generating them by each node itself upon verification (the virtual machine will ensure the same transactions are generated on each node).")])]),e._v(" "),s("h2",{attrs:{id:"pros-and-cons-of-proposed-design"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pros-and-cons-of-proposed-design"}},[e._v("#")]),e._v(" Pros and Cons of Proposed Design")]),e._v(" "),s("p",[e._v("In the proposed design, in-contract request block B11 and B12 are merged into B1. As shown in Figure 2, the new design creates 1 request block A1 and 3 response blocks: B1, C1 and D1.")]),e._v(" "),s("p",[s("img",{attrs:{src:n(620),alt:"figure"}})]),s("div",{attrs:{align:"center"}},[e._v("Figure 2")]),s("p"),e._v(" "),s("p",[e._v("Pros:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("ACID is guaranteed perfectly in nature since the response transaction and in-contract request transactions are written into one block")])]),e._v(" "),s("li",[s("p",[e._v("Duplicated data are removed since blocks are merged")])]),e._v(" "),s("li",[s("p",[e._v("Request-response pair is retained since independent transaction hash is kept in the request, facilitating queries for un-received transactions or transaction status")])])]),e._v(" "),s("p",[e._v("Cons:")]),e._v(" "),s("ul",[s("li",[e._v("None")])]),e._v(" "),s("h2",{attrs:{id:"conclusion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),s("p",[e._v("Based on the discussion above, this proposal suggests to merge in-contract request transactions into original response as one transaction, and keep request transaction hash.")]),e._v(" "),s("p",[e._v("The merged block may contain a response transaction and multiple request transactions. This will bring following benefits:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("ACID compliance on contract response transaction and newly-initiated in-contract request transactions in a graceful way. Easier for verification and transmission")])]),e._v(" "),s("li",[s("p",[e._v("Lighter ledger space")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);