(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{728:function(e,t,a){"use strict";a.r(t);var n=a(1),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),a("p",[e._v("Vite is an asynchronous blockchain built on a DAG ledger.")]),e._v(" "),a("p",[e._v("Vite smart contracts can be written in Solidity++, a programming language that extends Solidity with asynchronous semantics while maintains major compatibility.")]),e._v(" "),a("h2",{attrs:{id:"asynchronous-message-calls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-message-calls"}},[e._v("#")]),e._v(" Asynchronous Message Calls")]),e._v(" "),a("p",[e._v("Message calls in Ethereum are fully synchronous. All message calls in a call stack are executed sequentially in one transaction, they either completed at the same time or all fail.")]),e._v(" "),a("p",[e._v("Vite adopts an asynchronous architecture. A message call on Vite is separated into a "),a("em",[e._v("request")]),e._v(" and a "),a("em",[e._v("response")]),e._v(". Each message call explicitly yields an on-chain "),a("em",[e._v("request transaction")]),e._v(" (aka "),a("em",[e._v("send transaction")]),e._v(") when initiated and an on-chain "),a("em",[e._v("response transaction")]),e._v(" (aka "),a("em",[e._v("receive transaction")]),e._v(") when executed.")]),e._v(" "),a("p",[e._v("A request transaction indicates the call is successfully initiated and wait for the called contract to accept. A response transaction indicates the call is accepted and executed by the called contract.")]),e._v(" "),a("p",[e._v("There is no data to return immediately when the call is sent. When the request is accepted by the called contract, it will trigger a new request transaction as a "),a("em",[e._v("callback")]),e._v(" to pass the execution result back to the caller.")]),e._v(" "),a("h2",{attrs:{id:"costs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#costs"}},[e._v("#")]),e._v(" Costs")]),e._v(" "),a("p",[e._v("Creating new contract consumes VITE tokens. In Vite Mainnet, a base fee of 10 VITE is required for creating a contract.")]),e._v(" "),a("p",[e._v("A more accurate fee model will be applied on mainnet in the future.")]),e._v(" "),a("p",[e._v("Contract execution consumes quota instead of VITE tokens. The request transaction and the response transaction consume the quota of caller and the called contract respectively.")]),e._v(" "),a("p",[e._v("A contract can obtain quota by staking VITE tokens. If the contract runs out of quota, it will stop accepting requests until the quota is restored. Therefore, "),a("strong",[e._v("contract deployer should ensure 'enough' VITE tokens have been staked for the contract")]),e._v(".")]),e._v(" "),a("p",[e._v("If the quota of a contract is insufficient for generating a response transaction, the execution will consume up the remaining quota and generate a Panic exception. If the requested transaction includes a token transfer, the token will be returned to the original account. A panic due to insufficient quota will cause the contract suspended for 75 snapshots (about 75 seconds).")]),e._v(" "),a("h2",{attrs:{id:"smart-contract-language"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#smart-contract-language"}},[e._v("#")]),e._v(" Smart Contract Language")]),e._v(" "),a("p",[e._v("The asynchonous extension to Solidity is called Solidity++.")]),e._v(" "),a("h3",{attrs:{id:"messages-and-callbacks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#messages-and-callbacks"}},[e._v("#")]),e._v(" Messages and Callbacks")]),e._v(" "),a("p",[e._v("In the legacy versions of Solidity++, such as Solidity++ 0.4.3, developers can declare "),a("em",[e._v("messages")]),e._v(" through "),a("code",[e._v("message")]),e._v(" keyword, declare "),a("em",[e._v("callbacks")]),e._v(" via "),a("code",[e._v("onMessage")]),e._v(" keyword and send messages to another contract by using "),a("code",[e._v("send")]),e._v(" statement.")]),e._v(" "),a("p",[e._v("A "),a("em",[e._v("Request Transaction")]),e._v(" is generated and appended to Vite's ledger when Vite VM executes a "),a("code",[e._v("send")]),e._v(" statement.")]),e._v(" "),a("p",[e._v("Vite VM will execute the code of the "),a("code",[e._v("onMessage")]),e._v(" declared in the called contract "),a("em",[a("strong",[e._v("asynchronously")])]),e._v(", then generate a "),a("em",[e._v("Response Transaction")]),e._v(" linked to the request transaction, and append it to Vite's ledger.")]),e._v(" "),a("h3",{attrs:{id:"function-calls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-calls"}},[e._v("#")]),e._v(" Function Calls")]),e._v(" "),a("p",[e._v("Since Solidity++ 0.8.0, a fully Solidity compatible syntax is introduced and the low-level asynchronous syntax from 0.4.3 is deprecated.")]),e._v(" "),a("p",[e._v("Developers can declare a "),a("code",[e._v("function")]),e._v(" instead of "),a("code",[e._v("onMessage")]),e._v(" as a callback to receive requests to the contract.")]),e._v(" "),a("p",[e._v("And use an external function call statement rather than a "),a("code",[e._v("send")]),e._v(" statement to call another contract asynchronously.")]),e._v(" "),a("h3",{attrs:{id:"promise-and-async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-and-async-await"}},[e._v("#")]),e._v(" Promise and Async/Await")]),e._v(" "),a("p",[e._v("In Solidity++ 0.8.1, we will introduce a modern approach to asynchronous functions using "),a("code",[e._v("promise")]),e._v(" and "),a("code",[e._v("async")]),e._v("/"),a("code",[e._v("await")]),e._v(".")]),e._v(" "),a("p",[e._v("To those familiar with mordern programming languages such as javascript, the "),a("code",[e._v("async")]),e._v("/"),a("code",[e._v("await")]),e._v(" provides a more elegant and readable way to organise asynchronous function calls, and implement more reliable and concise control flows.")]),e._v(" "),a("h2",{attrs:{id:"vite-virtual-machine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vite-virtual-machine"}},[e._v("#")]),e._v(" Vite Virtual Machine")]),e._v(" "),a("p",[e._v("Vite VM is an asynchonous EVM which is partially compatible with EVM. Most EVM instructions maintain the original semantics in Vite.")]),e._v(" "),a("p",[e._v("However, due to the asynchonous nature of Vite and the different ledger and consensus, some instructions need to be modified or extended.")]),e._v(" "),a("p",[e._v("See "),a("RouterLink",{attrs:{to:"/contract/instructions.html"}},[e._v("Vite Instruction Set")]),e._v(" for details.")],1),e._v(" "),a("h2",{attrs:{id:"develop-and-debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#develop-and-debug"}},[e._v("#")]),e._v(" Develop and Debug")]),e._v(" "),a("p",[e._v("See "),a("RouterLink",{attrs:{to:"/contract/debug.html"}},[e._v("Debugging Smart Contracts")])],1)])}),[],!1,null,null,null);t.default=s.exports}}]);